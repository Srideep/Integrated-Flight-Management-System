%% create_navigation_module
% Complete script to create the Navigation Calculations module for IFMS

function create_navigation_module()
    % Create the navigation calculations model
    create_navigation_calculations();
    
    % Save the model
    save_system('Navigation_Calculations', 'models/Navigation_Calculations.slx');
    
    fprintf('Navigation Calculations module created successfully!\n');
end

function create_navigation_calculations()
    modelName = 'Navigation_Calculations';
    
    % Check if model already exists
    if bdIsLoaded(modelName)
        close_system(modelName, 0);
    end
    
    new_system(modelName);
    open_system(modelName);
    
    % Configure model
    set_param(modelName, 'SolverType', 'Fixed-step');
    set_param(modelName, 'FixedStep', '0.02');  % 50Hz
    set_param(modelName, 'StopTime', '3600');   % 1 hour simulation
    
    % Add main subsystems
    add_navigation_subsystems(modelName);
    
    % Create bus objects
    create_navigation_buses(modelName);
    
    % Connect subsystems
    connect_navigation_blocks(modelName);
    
    % Add test interfaces
    add_test_interfaces(modelName);
end

%% SUBSYSTEM FUNCTION 1: Add Navigation Subsystems
function add_navigation_subsystems(modelName)
    % Flight Plan Processing
    add_block('built-in/SubSystem', [modelName '/FlightPlan_Processor']);
    flightplan_sys = [modelName '/FlightPlan_Processor'];
    
    % Add MATLAB function for flight plan processing
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [flightplan_sys '/Process_FlightPlan']);
    
    set_param([flightplan_sys '/Process_FlightPlan'], 'Script', ...
        ['function [activeWP, nextWP, crossTrackError, alongTrackError] = fcn(currentPos, flightPlan, wpIndex)\n' ...
         '% Process flight plan and calculate navigation errors\n' ...
         '\n' ...
         '% Extract current waypoint\n' ...
         'if wpIndex <= length(flightPlan.waypoints)\n' ...
         '    activeWP = flightPlan.waypoints(wpIndex);\n' ...
         'else\n' ...
         '    activeWP = flightPlan.waypoints(end);\n' ...
         'end\n' ...
         '\n' ...
         '% Extract next waypoint\n' ...
         'if wpIndex < length(flightPlan.waypoints)\n' ...
         '    nextWP = flightPlan.waypoints(wpIndex + 1);\n' ...
         'else\n' ...
         '    nextWP = activeWP;\n' ...
         'end\n' ...
         '\n' ...
         '% Calculate cross-track error\n' ...
         '[crossTrackError, alongTrackError] = calculateTrackErrors(currentPos, activeWP, nextWP);\n' ...
         '\n' ...
         'end\n' ...
         '\n' ...
         'function [xte, ate] = calculateTrackErrors(pos, wp1, wp2)\n' ...
         '% Calculate cross-track and along-track errors\n' ...
         '\n' ...
         '% Convert to radians\n' ...
         'lat1 = deg2rad(pos.latitude);\n' ...
         'lon1 = deg2rad(pos.longitude);\n' ...
         'lat2 = deg2rad(wp1.latitude);\n' ...
         'lon2 = deg2rad(wp1.longitude);\n' ...
         'lat3 = deg2rad(wp2.latitude);\n' ...
         'lon3 = deg2rad(wp2.longitude);\n' ...
         '\n' ...
         '% Calculate course and distance to active waypoint\n' ...
         'dlon12 = lon2 - lon1;\n' ...
         'y12 = sin(dlon12) * cos(lat2);\n' ...
         'x12 = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dlon12);\n' ...
         'course12 = atan2(y12, x12);\n' ...
         '\n' ...
         '% Calculate course from active to next waypoint\n' ...
         'dlon23 = lon3 - lon2;\n' ...
         'y23 = sin(dlon23) * cos(lat3);\n' ...
         'x23 = cos(lat2) * sin(lat3) - sin(lat2) * cos(lat3) * cos(dlon23);\n' ...
         'course23 = atan2(y23, x23);\n' ...
         '\n' ...
         '% Calculate distance to active waypoint\n' ...
         'a = sin((lat2-lat1)/2)^2 + cos(lat1)*cos(lat2)*sin(dlon12/2)^2;\n' ...
         'c = 2 * atan2(sqrt(a), sqrt(1-a));\n' ...
         'distance12 = 3440.065 * c;  % Nautical miles\n' ...
         '\n' ...
         '% Cross-track error\n' ...
         'xte = asin(sin(distance12/3440.065) * sin(course12 - course23)) * 3440.065;\n' ...
         '\n' ...
         '% Along-track error\n' ...
         'ate = acos(cos(distance12/3440.065) / cos(xte/3440.065)) * 3440.065;\n' ...
         '\n' ...
         'end']);
    
    % Waypoint Sequencing
    add_block('built-in/SubSystem', [modelName '/Waypoint_Sequencing']);
    wp_seq_sys = [modelName '/Waypoint_Sequencing'];
    
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [wp_seq_sys '/Sequence_Logic']);
    
    set_param([wp_seq_sys '/Sequence_Logic'], 'Script', ...
        ['function [newWpIndex, waypointPassed] = fcn(currentPos, activeWP, wpIndex, alongTrackError)\n' ...
         '% Waypoint sequencing logic\n' ...
         '\n' ...
         'persistent lastWpIndex;\n' ...
         'if isempty(lastWpIndex)\n' ...
         '    lastWpIndex = 1;\n' ...
         'end\n' ...
         '\n' ...
         '% Calculate distance to active waypoint\n' ...
         'distance = calculateDistance(currentPos.latitude, currentPos.longitude, ...\n' ...
         '                           activeWP.latitude, activeWP.longitude);\n' ...
         '\n' ...
         '% Waypoint passed logic\n' ...
         'waypointPassed = false;\n' ...
         'if distance < 0.5 || alongTrackError < 0  % Within 0.5 nm or past waypoint\n' ...
         '    waypointPassed = true;\n' ...
         '    newWpIndex = wpIndex + 1;\n' ...
         'else\n' ...
         '    newWpIndex = wpIndex;\n' ...
         'end\n' ...
         '\n' ...
         'lastWpIndex = newWpIndex;\n' ...
         '\n' ...
         'end\n' ...
         '\n' ...
         'function dist = calculateDistance(lat1, lon1, lat2, lon2)\n' ...
         '% Great circle distance calculation\n' ...
         'lat1_rad = deg2rad(lat1);\n' ...
         'lon1_rad = deg2rad(lon1);\n' ...
         'lat2_rad = deg2rad(lat2);\n' ...
         'lon2_rad = deg2rad(lon2);\n' ...
         '\n' ...
         'dlat = lat2_rad - lat1_rad;\n' ...
         'dlon = lon2_rad - lon1_rad;\n' ...
         '\n' ...
         'a = sin(dlat/2)^2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon/2)^2;\n' ...
         'c = 2 * asin(sqrt(a));\n' ...
         '\n' ...
         'dist = 3440.065 * c;  % Nautical miles\n' ...
         'end']);
    
    % Course and Distance Calculations
    add_block('built-in/SubSystem', [modelName '/Course_Distance_Calc']);
    course_sys = [modelName '/Course_Distance_Calc'];
    
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
              [course_sys '/Calculate_Course_Distance']);
    
    set_param([course_sys '/Calculate_Course_Distance'], 'Script', ...
        ['function [desiredCourse, distanceToGo, bearingToWP] = fcn(currentPos, targetWP)\n' ...
         '% Calculate desired course and distance to waypoint\n' ...
         '\n' ...
         'lat1 = deg2rad(currentPos.latitude);\n' ...
         'lon1 = deg2rad(currentPos.longitude);\n' ...
         'lat2 = deg2rad(targetWP.latitude);\n' ...
         'lon2 = deg2rad(targetWP.longitude);\n' ...
         '\n' ...
         '% Calculate bearing\n' ...
         'dlon = lon2 - lon1;\n' ...
         'y = sin(dlon) * cos(lat2);\n' ...
         'x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dlon);\n' ...
         'bearingToWP = atan2(y, x);\n' ...
         'desiredCourse = rad2deg(bearingToWP);\n' ...
         '\n' ...
         '% Normalize to 0-360\n' ...
         'if desiredCourse < 0\n' ...
         '    desiredCourse = desiredCourse + 360;\n' ...
         'end\n' ...
         '\n' ...
         '% Calculate distance\n' ...
         'a = sin((lat2-lat1)/2)^2 + cos(lat1)*cos(lat2)*sin(dlon/2)^2;\n' ...
         'c = 2 * atan2(sqrt(a), sqrt(1-a));\n' ...
         'distanceToGo = 3440.065 * c;  % Nautical miles\n' ...
         '\n' ...
         'end']);
end

%% SUBSYSTEM FUNCTION 2: Create Navigation Buses
function create_navigation_buses(modelName)
    % Position Bus
    PositionElements(1) = Simulink.BusElement;
    PositionElements(1).Name = 'latitude';
    PositionElements(1).DataType = 'double';
    
    PositionElements(2) = Simulink.BusElement;
    PositionElements(2).Name = 'longitude';
    PositionElements(2).DataType = 'double';
    
    PositionElements(3) = Simulink.BusElement;
    PositionElements(3).Name = 'altitude';
    PositionElements(3).DataType = 'double';
    
    PositionBus = Simulink.Bus;
    PositionBus.Elements = PositionElements;
    
    % Waypoint Bus
    WaypointElements(1) = Simulink.BusElement;
    WaypointElements(1).Name = 'latitude';
    WaypointElements(1).DataType = 'double';
    
    WaypointElements(2) = Simulink.BusElement;
    WaypointElements(2).Name = 'longitude';
    WaypointElements(2).DataType = 'double';
    
    WaypointElements(3) = Simulink.BusElement;
    WaypointElements(3).Name = 'altitude';
    WaypointElements(3).DataType = 'double';
    
    WaypointBus = Simulink.Bus;
    WaypointBus.Elements = WaypointElements;
    
    % Flight Plan Bus
    FlightPlanElements(1) = Simulink.BusElement;
    FlightPlanElements(1).Name = 'waypoints';
    FlightPlanElements(1).DataType = 'Bus: WaypointBus';
    FlightPlanElements(1).Dimensions = [20 1];
    
    FlightPlanElements(2) = Simulink.BusElement;
    FlightPlanElements(2).Name = 'numWaypoints';
    FlightPlanElements(2).DataType = 'uint8';
    
    FlightPlanBus = Simulink.Bus;
    FlightPlanBus.Elements = FlightPlanElements;
    
    % Navigation Output Bus
    NavElements(1) = Simulink.BusElement;
    NavElements(1).Name = 'crossTrackError';
    NavElements(1).DataType = 'double';
    NavElements(1).Unit = 'nm';
    
    NavElements(2) = Simulink.BusElement;
    NavElements(2).Name = 'desiredCourse';
    NavElements(2).DataType = 'double';
    NavElements(2).Unit = 'deg';
    
    NavElements(3) = Simulink.BusElement;
    NavElements(3).Name = 'distanceToGo';
    NavElements(3).DataType = 'double';
    NavElements(3).Unit = 'nm';
    
    NavElements(4) = Simulink.BusElement;
    NavElements(4).Name = 'waypointPassed';
    NavElements(4).DataType = 'boolean';
    
    NavElements(5) = Simulink.BusElement;
    NavElements(5).Name = 'alongTrackError';
    NavElements(5).DataType = 'double';
    NavElements(5).Unit = 'nm';
    
    NavigationBus = Simulink.Bus;
    NavigationBus.Elements = NavElements;
    
    % Save to base workspace
    assignin('base', 'PositionBus', PositionBus);
    assignin('base', 'WaypointBus', WaypointBus);
    assignin('base', 'NavigationBus', NavigationBus);
    assignin('base', 'FlightPlanBus', FlightPlanBus);
end

%% SUBSYSTEM FUNCTION 3: Connect Navigation Blocks
function connect_navigation_blocks(modelName)
    % Add input ports
    add_block('simulink/Sources/In1', [modelName '/Current_Position']);
    set_param([modelName '/Current_Position'], 'OutDataTypeStr', 'Bus: PositionBus');
    
    add_block('simulink/Sources/In1', [modelName '/Flight_Plan']);
    set_param([modelName '/Flight_Plan'], 'OutDataTypeStr', 'Bus: FlightPlanBus');
    
    add_block('simulink/Sources/In1', [modelName '/Waypoint_Index']);
    set_param([modelName '/Waypoint_Index'], 'OutDataTypeStr', 'uint8');
    
    % Add output ports
    add_block('simulink/Sinks/Out1', [modelName '/Navigation_Output']);
    set_param([modelName '/Navigation_Output'], 'OutDataTypeStr', 'Bus: NavigationBus');
    
    add_block('simulink/Sinks/Out1', [modelName '/Active_Waypoint']);
    set_param([modelName '/Active_Waypoint'], 'OutDataTypeStr', 'Bus: WaypointBus');
    
    add_block('simulink/Sinks/Out1', [modelName '/New_Waypoint_Index']);
    set_param([modelName '/New_Waypoint_Index'], 'OutDataTypeStr', 'uint8');
    
    % Add Bus Creator for Navigation Output
    add_block('simulink/Signal Routing/Bus Creator', [modelName '/Nav_Bus_Creator']);
    set_param([modelName '/Nav_Bus_Creator'], 'OutDataTypeStr', 'Bus: NavigationBus');
    
    % Position blocks
    set_param([modelName '/Current_Position'], 'Position', [50, 50, 80, 70]);
    set_param([modelName '/Flight_Plan'], 'Position', [50, 150, 80, 170]);
    set_param([modelName '/Waypoint_Index'], 'Position', [50, 250, 80, 270]);
    
    set_param([modelName '/FlightPlan_Processor'], 'Position', [200, 100, 350, 200]);
    set_param([modelName '/Waypoint_Sequencing'], 'Position', [400, 200, 550, 300]);
    set_param([modelName '/Course_Distance_Calc'], 'Position', [200, 300, 350, 400]);
    
    set_param([modelName '/Nav_Bus_Creator'], 'Position', [650, 150, 700, 250]);
    set_param([modelName '/Navigation_Output'], 'Position', [750, 190, 780, 210]);
    set_param([modelName '/Active_Waypoint'], 'Position', [750, 50, 780, 70]);
    set_param([modelName '/New_Waypoint_Index'], 'Position', [750, 290, 780, 310]);
    
    % Connect blocks
    add_line(modelName, 'Current_Position/1', 'FlightPlan_Processor/1');
    add_line(modelName, 'Flight_Plan/1', 'FlightPlan_Processor/2');
    add_line(modelName, 'Waypoint_Index/1', 'FlightPlan_Processor/3');
    
    % Add necessary connections between subsystems
    % Note: You'll need to add appropriate input/output ports to each subsystem
    % and connect them properly based on your specific requirements
end

%% SUBSYSTEM FUNCTION 4: Add Test Interfaces
function add_test_interfaces(modelName)
    % Add signal logging
    add_block('simulink/Sinks/To Workspace', [modelName '/Log_XTE']);
    set_param([modelName '/Log_XTE'], 'VariableName', 'cross_track_error');
    set_param([modelName '/Log_XTE'], 'Position', [650, 350, 700, 380]);
    
    add_block('simulink/Sinks/To Workspace', [modelName '/Log_DTG']);
    set_param([modelName '/Log_DTG'], 'VariableName', 'distance_to_go');
    set_param([modelName '/Log_DTG'], 'Position', [650, 400, 700, 430]);
    
    add_block('simulink/Sinks/To Workspace', [modelName '/Log_Course']);
    set_param([modelName '/Log_Course'], 'VariableName', 'desired_course');
    set_param([modelName '/Log_Course'], 'Position', [650, 450, 700, 480]);
    
    % Add test points for coverage analysis
    add_block('simulink/Model Verification/Check Static Range', ...
              [modelName '/Check_XTE_Range']);
    set_param([modelName '/Check_XTE_Range'], 'Position', [500, 350, 550, 380]);
    set_param([modelName '/Check_XTE_Range'], 'min', '-50');
    set_param([modelName '/Check_XTE_Range'], 'max', '50');
    
    % Add simulation data inspector points
    add_block('simulink/Sinks/Scope', [modelName '/Navigation_Scope']);
    set_param([modelName '/Navigation_Scope'], 'Position', [800, 350, 850, 400]);
    set_param([modelName '/Navigation_Scope'], 'NumInputPorts', '3');
end
